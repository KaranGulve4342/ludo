version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:6.0
    container_name: ludo-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: ludo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ludo-network

  # Redis for Socket.IO adapter (optional, for scaling)
  redis:
    image: redis:7-alpine
    container_name: ludo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ludo-network

  # Ludo backend application
  ludo-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ludo-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGO_URI: mongodb://root:rootpassword@mongodb:27017/ludo?authSource=admin
      LOG_DIR: /app/logs
      SOCKET_CORS_ORIGIN: http://localhost:3000
      SCORE_COMBO_WINDOW_MS: 10000
      REDIS_URL: redis://redis:6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - ludo-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ludo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ludo-backend
    networks:
      - ludo-network

volumes:
  mongodb_data:
  redis_data:

networks:
  ludo-network:
    driver: bridge
